{"version":3,"sources":["components/Form/Form.jsx","components/ContactList/ContactList.jsx","components/App.js","index.js"],"names":["id","nanoid","SignupSchema","Yup","shape","name","min","max","required","matches","number","ContactForm","react_default","a","createElement","formik_esm","initialValues","validationSchema","onSubmit","values","_ref","resetForm","console","log","_ref2","errors","touched","htmlFor","type","placeholder","ContactList","contacts","map","key","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","filter","inherits","createClass","value","Form","components_ContactList_ContactList","Component","ReactDOM","createRoot","document","getElementById","render","StrictMode","components_App"],"mappings":"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","file":"static/js/main.a2c1bde0.chunk.js","sourcesContent":["import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { nanoid } from 'nanoid';\r\n    \r\nconst id = nanoid(5);\r\n\r\nconst SignupSchema = Yup.object().shape({\r\nname: Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(20, 'Too Long!')\r\n    .required('Please enter a name')\r\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must be only letters\"),\r\nnumber: Yup.string()\r\n    .min(6, 'Too Short!')\r\n    .max(10, 'Too Long!')\r\n    .required('Please enter a number')\r\n    .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Must be only digits\"),\r\n});\r\n\r\nconst ContactForm  = () => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: '',\r\n                number: '',\r\n            }}\r\n            validationSchema={SignupSchema}\r\n            onSubmit={(values, {resetForm}) => {\r\n                console.log(values);\r\n                resetForm ()\r\n            }}\r\n    >\r\n\r\n    {({ errors, touched }) => (\r\n        <Form>\r\n        <label htmlFor=\"name\">Name</label>\r\n        <Field\r\n            id={id}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"enter name\"/>\r\n        {errors.name && touched.name ? (\r\n            <div>{errors.name}</div>\r\n        ) : null}\r\n        \r\n        <label htmlFor=\"number\">Number</label>\r\n        <Field\r\n            id={id}\r\n            type=\"number\"\r\n            name=\"number\"\r\n            placeholder=\"enter number\" />\r\n        {errors.number && touched.number ? (\r\n            <div>{errors.number}</div>\r\n        ) : null}\r\n        \r\n        <button type=\"submit\">Add contact</button>\r\n        </Form>\r\n    )}\r\n    </Formik>\r\n    )\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({contacts}) => {\r\n    return (\r\n        <ul>\r\n        {contacts.map(({ id, name, number }) => \r\n            (<li key={id}>\r\n                <p>{name}</p>\r\n                <p>{number}</p>\r\n                <button type='submit'>Delete</button>\r\n            </li>)\r\n            \r\n        )\r\n        }\r\n        </ul>\r\n    )\r\n}\r\nexport default ContactList;","import React, {Component} from \"react\";\r\n// import styled from 'styled-components';\r\n// import { nanoid } from 'nanoid';\r\nimport ContactForm from \"./Form/Form\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\n\r\n\r\nexport class App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  }\r\n\r\n  // addContact = (name, number) => {\r\n  //   const person = {\r\n  //     id: nanoid(),\r\n  //     name,\r\n  //     number,\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n  <ContactForm />\r\n\r\n  <h2>Contacts</h2>\r\n  {/* <Filter/> */}\r\n  <ContactList contacts={this.state.contacts}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}